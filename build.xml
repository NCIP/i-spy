<project name="ispyPortal" default="build_war_anthill" basedir=".">
	<property file="build.properties" />

	<!--
		TARGET: COMPILE
			Compiles the source directory without anthill dependencies
		-->
	<target name="compile" depends="config_logging, config_cache">
		<delete dir="${build.classes.dir}"/>
		<mkdir dir="${build.classes.dir}"/>
		<javac srcdir="${source.dir}" destdir="${build.classes.dir}" source="1.5" excludes="**/test/**" debug="true" debuglevel="lines,vars,source">
			<classpath>
				<fileset dir="${source.lib.dir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${source.nondeploy.lib.dir}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${anthill.dependency.artifacts.dir}">
					<include name="*.jar"/>					
				</fileset>
			</classpath>
		</javac>
	</target>
	
	<!--
		TARGET: config_logging
		Configures the log4j.properties file using the settings in the
		build.properties file
	-->
	<target name="config_logging">
		<delete file="src/log4j.properties"/>
		<copy file="src/log4j.properties.template" tofile="src/log4j.properties"/>
		<replaceregexp file="src/log4j.properties" match="@LOGDIR@" replace="${logging.dir}" flags="g"/>
	</target>
	<!--
		TARGET: config_cache
		Configures the echache.xml file using the settings in the
		build.properties file
	-->
	<target name="config_cache">
		<delete file="src/ehcache.xml"/>
		<copy file="src/ehcache.xml.template" tofile="src/ehcache.xml"/>
		<replaceregexp file="src/ehcache.xml" match="@echache_path@" replace="${jboss.install.dir}server/${jboss.server.name}/tmp/${app.war.name}" flags="g"/>
	</target>
	<!--
		TARGET: config_analysis_server
		Configures the JMS.properties file using the settings in the
		build.properties file
	-->
	
	<!-- Analysis server configuration is now handled by external properties.
	
	<target name="config_analysis_server" depends="config_logging, config_cache">
		<delete file="src/jms.properties"/>
		<copy file="src/jms.properties.template" tofile="src/jms.properties"/>
		<replaceregexp file="src/jms.properties" match="@JBOSS_URL@" replace="${analytical.jboss.jndi}" flags="g"/>
		<replaceregexp file="src/jms.properties" match="@ANALYSIS_REQUEST_QUEUE@" replace="${analytical.jms.requestQueue}" flags="g"/>
		<replaceregexp file="src/jms.properties" match="@ANALYSIS_RESPONSE_QUEUE@" replace="${analytical.jms.responseQueue}" flags="g"/>
	</target>
	
	-->
	
	
	<!--
        TARGET: copy_resources
        Copies all the bundle resources to the WEB-INF/classes/ folder
    -->
	<target name="copy_resources" depends="compile">
		<copy todir="${build.classes.dir}">
			<fileset dir="${source.dir}">
				<include name="*.xml"/>
				<exclude name="ispy-jbossmq-destinations-service.xml"/>
				<include name="*.properties"/>
				<include name="*.dtd"/>
				<include name="*.xsd"/>
			</fileset>
		</copy>
	</target>
		
		<target name="config-jbossmq">
			<copy file="${source.dir}\ispy-jbossmq-destinations-service.xml" todir="${jboss.deploy.dir}"/>
		</target>
	<!--
		TARGET: build_war
		This will build the war file and should be used instead of the 
		build_war_anthill task (which is intended to be used by SCM)
	-->
	<target name="build_war_anthill" depends="copy_resources">
		<delete file="${app.war.name}.war"/>
		<war destfile="${app.war.name}.war" webxml="${webapp.dir}/WEB-INF/web.xml">
			<fileset file="${webapp.dir}/*.*"/>
			<!-- <zipfileset dir="${webapp.dir}/docs" prefix="docs"/> need for user manual-->
			<zipfileset dir="${webapp.dir}/css" prefix="css"/>
			<zipfileset dir="${webapp.dir}/images" prefix="images"/>
			<zipfileset dir="${webapp.dir}/js" prefix="js"/>
			<!-- <zipfileset dir="${webapp.dir}/tutorials" prefix="tutorials"/> needed for later -->
			<zipfileset dir="${webapp.dir}/xsl" prefix="xsl"/>
			<zipfileset dir="${anthill.dependency.artifacts.dir}" prefix="WEB-INF/lib" >
				<include name="caintegrator-analysis-commons.jar"/>
				<include name="caintegrator-application-commons.jar"/>
				<include name="caintegrator-spec.jar"/>
			</zipfileset>
			<webinf dir="${webapp.dir}/WEB-INF"/>
		</war>
	</target>

	<!--
				TARGET: config_common_security_module
				Configures the common security module creating the necesary files
				for Authentication and Authorization
		-->
		<target name="config_common_security_module">
			<echo message="Configuring Common Security Module"/>
			<!-- Configuring ApplicationSecurityConfig.xml -->
			<echo message="Setting ApplicationSecurityConfig.xml"/>
			<delete file="csm_deploy/ApplicationSecurityConfig.xml"/>
			<copy file="conf/csm/ApplicationSecurityConfig.xml.template" tofile="csm_deploy/ApplicationSecurityConfig.xml"/>
			<replaceregexp file="csm_deploy/ApplicationSecurityConfig.xml" match="@CONTEXT_NAME@" replace="${app.war.name}" flags="g"/>
			<replaceregexp file="csm_deploy/ApplicationSecurityConfig.xml" match="@HIBERNATE_CONFIG_FILE@" replace="${csm.hibernate.config.file}" flags="g"/>
			<!-- Configuring rembrandt.hibernate.cfg.xml -->
			<echo message="Setting rembrandt.hibernate.cfg.xml"/>
			<delete file="conf/csm/rembrandt.hibernate.cfg.xml"/>
			<copy file="conf/csm/rembrandt.hibernate.cfg.xml.template" tofile="csm_deploy/rembrandt.hibernate.cfg.xml"/>
			<replaceregexp file="csm_deploy/rembrandt.hibernate.cfg.xml" match="@DATASOURCE_JNDI@" replace="${csm.jndi.connection.datasource}" flags="g"/>
			<!-- Configuring oracle-ds.xml -->
			<echo message="Configuring oracle-ds.xml"/>
			<delete file="csm_deploy/oracle-ds.xml"/>
			<copy file="conf/csm/oracle-ds.xml.template" tofile="csm_deploy/oracle-ds.xml"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@DATASOURCE_JNDI@" replace="${csm.jndi.connection.datasource}" flags="g"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@DB_CONNECTION_URL@" replace="jdbc:oracle:${urlDbalias}" flags="g"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@DB_USERNAME@" replace="${databaseUser}" flags="g"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@DB_PASSWORD@" replace="${databasePassword}" flags="g"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@ORACLE_DRIVER_CLASS@" replace="${jdbcRuntimeDriver}" flags="g"/>
			<replaceregexp file="csm_deploy/oracle-ds.xml" match="@EXCEPTION_SORTER_CLASS@" replace="${csm.exception.sorter.class}" flags="g"/>
			<!-- Configuring properties-service.xml -->
			<echo message="Configuring properties-service.xml"/>
			<delete file="csm_deploy/properties-service.xml"/>
			<copy file="conf/csm/properties-service.xml.template" tofile="csm_deploy/properties-service.xml"/>
			<replaceregexp file="csm_deploy/properties-service.xml" match="@CSM_APPLICATION_CONFIG_FILE@" replace="${csm.application.config.file}" flags="g"/>
		</target>
		<!--
				TARGET: developement_config_common_security_module
				Will create and configure the CSM for the current local development
				environments. Depends on the "config_common_security_module"
				to create the necesary files
			-->
		<target name="developement_config_common_security_module" depends="config_common_security_module">
			<!-- Copy it to Jboss Deploy folder -->
			<copy file="csm_deploy/oracle-ds.xml" todir="${jboss.deploy.dir}"/>
			<!-- Copy it to Jboss Conf folder -->
			<copy file="csm_deploy/rembrandt.hibernate.cfg.xml" todir="${jboss.conf.dir}"/>
			<!-- Copy it to Jboss Conf folder -->
			<copy file="csm_deploy/ApplicationSecurityConfig.xml" todir="${jboss.conf.dir}"/>
		</target>
</project>
